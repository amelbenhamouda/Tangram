{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf6\b /*!
\par  *  \b0\cb3\cf8 \\file \cb3\cf6\b board.hpp
\par  *  \b0\cb3\cf8 \\brief \cb3\cf6\b Le fichier d'entête de board.cpp.
\par  *  \b0\cb3\cf8 \\author \cb3\cf6\b BEN HAMOUDA Amel & DURAND Aurélien
\par  */
\par 
\par \b0\cb3\cf16 #ifndef BOARD_H
\par #define BOARD_H
\par     #include <iostream> 
\par     #include <MLV/MLV_all.h>
\par     #include <map>
\par     #include <cmath>
\par 
\par     \cb3\cf6\b /*! \b0\cb3\cf8 \\class \cb3\cf6\b Button
\par      *  \b0\cb3\cf8 \\brief \cb3\cf6\b Déclaration de l'objet Button.
\par      *
\par      *  \b0\cb3\cf8 \\tparam \cb3\cf6\b T Type associé à un bouton (int, double,...).
\par      */
\par     \b0\cb3\cf14\b template\b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 > 
\par     \cb3\cf14\b class \b0\cb1\cf0 Button\cb3\cf25 ;
\par 
\par     \cb3\cf6\b /*! \b0\cb3\cf8 \\class \cb3\cf6\b Board
\par      *  \b0\cb3\cf8 \\brief \cb3\cf6\b Classe représentant le plateau de jeu.
\par      *
\par      *  La classe gére l'affichage du plateau et des pièces.
\par      */
\par     \b0\cb3\cf14\b class \b0\cb1\cf0 Board \cb3\cf25 \{
\par         \cb3\cf14\b private\b0\cb3\cf25 :
\par             \cb3\cf14\b int \b0\cb1\cf0 width\cb3\cf25 ; \cb3\cf6\b /*!< La longeur de la fenêtre. */
\par             \b0\cb3\cf14\b int \b0\cb1\cf0 height\cb3\cf25 ; \cb3\cf6\b /*!< La largeur de la fenêtre. */
\par             \b0\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b map\b0\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 , \cb1\cf0 Button\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 >> \cb1\cf0 buttons\cb3\cf25 ; \cb3\cf6\b /*!< La liste des boutons du plateau. */
\par 
\par         \b0\cb3\cf14\b public\b0\cb3\cf25 :
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Constructeur de Board.
\par              *
\par              *  Constructeur de la classe Board.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b width : La longeur de la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b height : La largeur de la fenêtre.
\par              */
\par             \b0\cb1\cf0 Board\cb3\cf25 (\cb3\cf14\b const int \b0\cb1\cf0 width\cb3\cf25 , \cb3\cf14\b const int \b0\cb1\cf0 height\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Destructeur de Board.
\par              *
\par              *  Destructeur de la classe Board.
\par              */
\par             \b0\cb3\cf14\b virtual\b0\cb3\cf25 ~\cb1\cf0 Board\cb3\cf25 ();
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Affiche un plateau gris.
\par              * 
\par              *   Fonction qui dessine le plateau de jeu (gris).
\par              */
\par             \b0\cb3\cf14\b void \b0\cb1\cf0 drawBoard\cb3\cf25 ();
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Création des boutons pour le jeu.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b numFig : Le numéro de la figure que le joueur essaie de résoudre.
\par              */
\par             \b0\cb3\cf14\b void \b0\cb1\cf0 createButtonForBoard\cb3\cf25 (\cb3\cf14\b const unsigned int \b0\cb1\cf0 numFig\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Affiche les boutons pour le jeu.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b numFig : Le numéro de la figure que le joueur essaie de résoudre.
\par              */
\par             \b0\cb3\cf14\b void \b0\cb1\cf0 drawButtonForBoard\cb3\cf25 (\cb3\cf14\b const unsigned int \b0\cb1\cf0 numFig\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Savoir si on a cliqué sur le bouton
\par              *
\par              *  Renvoie un entier en fonction du bouton cliqué.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b pX : La coordonnée x du clic de la souris.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b pY : La coordonnée y du clic de la souris.
\par              */
\par             \b0\cb3\cf14\b int \b0\cb1\cf0 inBoard\cb3\cf25 (\cb3\cf14\b const int \b0\cb1\cf0 pX\cb3\cf25 , \cb3\cf14\b const int \b0\cb1\cf0 pY\cb3\cf25 );
\par     \};
\par 
\par \cb3\cf16 #endif \cb3\cf4 // BOARD_
\par }