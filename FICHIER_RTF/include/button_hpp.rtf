{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf6\b /*!
\par  *  \b0\cb3\cf8 \\file \cb3\cf6\b button.hpp
\par  *  \b0\cb3\cf8 \\brief \cb3\cf6\b Le fichier d'entête de button.cpp.
\par  *  \b0\cb3\cf8 \\author \cb3\cf6\b BEN HAMOUDA Amel & DURAND Aurélien
\par  */
\par 
\par \b0\cb3\cf16 #ifndef BUTTON_H
\par #define BUTTON_H
\par     #include <iostream> 
\par     #include <MLV/MLV_all.h>
\par 
\par     \cb3\cf6\b /*! \b0\cb3\cf8 \\class \cb3\cf6\b Button
\par      *  \b0\cb3\cf8 \\brief \cb3\cf6\b Classe représentant le bouton.
\par      *
\par      *  \b0\cb3\cf8 \\tparam \cb3\cf6\b T Type associé à un bouton (int, float,...).
\par      *
\par      *  La classe gére la création, l'affichage et l'interaction d'un bouton.
\par      */
\par     \b0\cb3\cf14\b template\b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 > 
\par     \cb3\cf14\b class \b0\cb1\cf0 Button \cb3\cf25 \{
\par         \cb3\cf14\b private\b0\cb3\cf25 :        
\par             \cb1\cf0 T x\cb3\cf25 ; \cb3\cf6\b /*!< La coordonnée en x de la position du coin Nord-Ouest de la boîte. */
\par             \b0\cb1\cf0 T y\cb3\cf25 ; \cb3\cf6\b /*!< La coordonnée en y de la position du coin Nord-Ouest de la boîte. */
\par             \b0\cb1\cf0 T width\cb3\cf25 ; \cb3\cf6\b /*!< La longeur de la fenêtre. */
\par             \b0\cb1\cf0 T height\cb3\cf25 ; \cb3\cf6\b /*!< La largeur de la fenêtre. */
\par             \b0\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b string \b0\cb1\cf0 message\cb3\cf25 ; \cb3\cf6\b /*!< Le message qui sera écrit sur le bouton. */
\par             \b0\cb1\cf0 T interligne\cb3\cf25 ; \cb3\cf6\b /*!< La taille de l'interligne. */
\par             \b0\cb1\cf0 MLV_Color borderColor\cb3\cf25 ; \cb3\cf6\b /*!< La couleur de la bordure. */
\par             \b0\cb1\cf0 MLV_Color textColor\cb3\cf25 ; \cb3\cf6\b /*!< La couleur du texte. */
\par             \b0\cb1\cf0 MLV_Color backgroundColor\cb3\cf25 ; \cb3\cf6\b /*!< La couleur du fond de la boîte. */
\par 
\par         \b0\cb3\cf14\b public\b0\cb3\cf25 :
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Constructeur de Button.
\par              *
\par              */
\par             \b0\cb3\cf14\b constexpr \b0\cb1\cf0 Button\cb3\cf25 ();
\par       
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Constructeur de Button.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b x : La coordonnée en x de la position du coin Nord-Ouest de la boîte.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b y : La coordonnée en y de la position du coin Nord-Ouest de la boîte.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b width : La longeur de la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b height : La largeur de la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b message : Le message qui sera écrit sur le bouton.
\par              */
\par             \b0\cb3\cf14\b constexpr \b0\cb1\cf0 Button\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 T x\cb3\cf25 , \cb3\cf14\b const \b0\cb1\cf0 T y\cb3\cf25 , \cb3\cf14\b const \b0\cb1\cf0 T width\cb3\cf25 , \cb3\cf14\b const \b0\cb1\cf0 T height\cb3\cf25 , \cb3\cf14\b const \b0\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b string \b0\cb1\cf0 message\cb3\cf25 );
\par         
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Destructeur de Button.
\par              * 
\par              *  Destructeur de la classe Button déclaré en virtuel.
\par              *  Le destructeur n'a pas d'implémentation car les attributs sont statics.
\par              */
\par             \b0\cb3\cf14\b virtual\b0\cb3\cf25 ~\cb1\cf0 Button\cb3\cf25 ();
\par         
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Dessine un bouton.
\par              *
\par              *  Dessine un bouton en fonction de tous ces paramètres.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b interligne : La taille de l'interligne.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b borderColor : La couleur de la bordure.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b textColor : La couleur du texte.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b backgroundColor : La couleur du fond de la boîte.
\par              */
\par             \b0\cb3\cf14\b constexpr void \b0\cb1\cf0 drawButton\cb3\cf25 (\cb1\cf0 T interligne\cb3\cf25 , \cb1\cf0 MLV_Color borderColor\cb3\cf25 , \cb1\cf0 MLV_Color textColor\cb3\cf25 , \cb1\cf0 MLV_Color backgroundColor\cb3\cf25 );
\par       
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Savoir si on a cliqué sur le bouton.
\par              *
\par              *  Renvoie un entier en fonction du bouton cliqué.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b pX : La coordonnée x du clic de la souris.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b pY : La coordonnée y du clic de la souris.
\par              */
\par             \b0\cb3\cf14\b constexpr bool \b0\cb1\cf0 inButton\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 T pX\cb3\cf25 , \cb3\cf14\b const \b0\cb1\cf0 T pY\cb3\cf25 );
\par     \};
\par 
\par     \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par     \cb3\cf14\b constexpr \b0\cb1\cf0 Button\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Button\cb3\cf25 () : \cb1\cf0 x\cb3\cf25 (\cb3\cf12 0\cb3\cf25 ), \cb1\cf0 y\cb3\cf25 (\cb3\cf12 0\cb3\cf25 ), \cb1\cf0 width\cb3\cf25 (\cb3\cf12 0\cb3\cf25 ), \cb1\cf0 height\cb3\cf25 (\cb3\cf12 0\cb3\cf25 ), \cb1\cf0 message\cb3\cf25 (\cb3\cf12 0\cb3\cf25 ), \cb1\cf0 interligne\cb3\cf25 (\cb3\cf12 0\cb3\cf25 ), \cb1\cf0 borderColor\cb3\cf25 (\cb1\cf0 MLV_COLOR_BLACK\cb3\cf25 ), \cb1\cf0 textColor\cb3\cf25 (\cb1\cf0 MLV_COLOR_BLACK\cb3\cf25 ), \cb1\cf0 backgroundColor\cb3\cf25 (\cb1\cf0 MLV_COLOR_BLACK\cb3\cf25 ) \{\}
\par     
\par     \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par     \cb3\cf14\b constexpr \b0\cb1\cf0 Button\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Button\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 T x\cb3\cf25 , \cb3\cf14\b const \b0\cb1\cf0 T y\cb3\cf25 , \cb3\cf14\b const \b0\cb1\cf0 T width\cb3\cf25 , \cb3\cf14\b const \b0\cb1\cf0 T height\cb3\cf25 , \cb3\cf14\b const \b0\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b string \b0\cb1\cf0 message\cb3\cf25 ) : \cb1\cf0 x\cb3\cf25 (\cb1\cf0 x\cb3\cf25 ), \cb1\cf0 y\cb3\cf25 (\cb1\cf0 y\cb3\cf25 ), \cb1\cf0 width\cb3\cf25 (\cb1\cf0 width\cb3\cf25 ), \cb1\cf0 height\cb3\cf25 (\cb1\cf0 height\cb3\cf25 ), \cb1\cf0 message\cb3\cf25 (\cb1\cf0 message\cb3\cf25 ), \cb1\cf0 interligne\cb3\cf25 (\cb3\cf12 0\cb3\cf25 ), \cb1\cf0 borderColor\cb3\cf25 (\cb1\cf0 MLV_COLOR_BLACK\cb3\cf25 ), \cb1\cf0 textColor\cb3\cf25 (\cb1\cf0 MLV_COLOR_BLACK\cb3\cf25 ), \cb1\cf0 backgroundColor\cb3\cf25 (\cb1\cf0 MLV_COLOR_BLACK\cb3\cf25 ) \{\}
\par     
\par     \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par     \cb1\cf0 Button\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::~\cb1\cf0 Button\cb3\cf25 ()\{\}
\par 
\par     \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b typename \b0\cb1\cf0 T\cb3\cf25 >
\par     \cb3\cf14\b constexpr void \b0\cb1\cf0 Button\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 drawButton\cb3\cf25 (\cb1\cf0 T interligne\cb3\cf25 , \cb1\cf0 MLV_Color borderColor\cb3\cf25 , \cb1\cf0 MLV_Color textColor\cb3\cf25 , \cb1\cf0 MLV_Color backgroundColor\cb3\cf25 ) \{
\par         \cb3\cf4 // x, y  La coordonnée en X, Y de la position du coin Nord-Ouest de la boîte.
\par         \cb3\cf14\b const char \b0\cb3\cf25 * \cb1\cf0 cstr \cb3\cf25 = \cb1\cf0 message\cb3\cf25 .\cb1\cf0 c_str\cb3\cf25 ();
\par         \cb1\cf0 MLV_draw_text_box\cb3\cf25 (\cb1\cf0 x\cb3\cf25 , \cb1\cf0 y\cb3\cf25 , \cb1\cf0 width\cb3\cf25 , \cb1\cf0 height\cb3\cf25 , \cb1\cf0 cstr\cb3\cf25 , \cb1\cf0 interligne\cb3\cf25 , \cb1\cf0 borderColor\cb3\cf25 , \cb1\cf0 textColor\cb3\cf25 , \cb1\cf0 backgroundColor\cb3\cf25 , \cb1\cf0 MLV_TEXT_LEFT\cb3\cf25 , \cb1\cf0 MLV_HORIZONTAL_CENTER\cb3\cf25 , \cb1\cf0 MLV_VERTICAL_CENTER\cb3\cf25 );
\par     \}
\par 
\par     \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b typename \b0\cb1\cf0 T\cb3\cf25 >
\par     \cb3\cf14\b constexpr bool \b0\cb1\cf0 Button\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 inButton\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 T pX\cb3\cf25 , \cb3\cf14\b const \b0\cb1\cf0 T pY\cb3\cf25 ) \{
\par         \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 pX \cb3\cf25 >= \cb1\cf0 x and pX \cb3\cf25 <= (\cb1\cf0 x \cb3\cf25 + \cb1\cf0 width\cb3\cf25 ) \cb1\cf0 and pY \cb3\cf25 >= \cb1\cf0 y and pY \cb3\cf25 <= (\cb1\cf0 y \cb3\cf25 + \cb1\cf0 height\cb3\cf25 )) \{
\par            \cb3\cf14\b return \b0\cb3\cf12 1\cb3\cf25 ;
\par         \}
\par         \cb3\cf14\b return \b0\cb3\cf12 0\cb3\cf25 ;
\par     \}
\par 
\par \cb3\cf16 #endif \cb3\cf4 // BUTTON_
\par }