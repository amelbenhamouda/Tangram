{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf6\b /*!
\par  *  \b0\cb3\cf8 \\file \cb3\cf6\b parallelogram.hpp
\par  *  \b0\cb3\cf8 \\brief \cb3\cf6\b Le fichier d'entête de parallelogram.cpp.
\par  *  \b0\cb3\cf8 \\author \cb3\cf6\b BEN HAMOUDA Amel & DURAND Aurélien
\par  */
\par 
\par \b0\cb3\cf16 #ifndef PARALLELOGRAM_H
\par #define PARALLELOGRAM_H
\par #include <vector>
\par #include <iostream>
\par #include "../include/shape.hpp"
\par 
\par \cb3\cf14\b namespace \b0\cb1\cf0 geometricShape \cb3\cf25 \{
\par     \cb3\cf6\b /*! \b0\cb3\cf8 \\class \cb3\cf6\b Parallelogram
\par      *  \b0\cb3\cf8 \\brief \cb3\cf6\b Classe représentant le parallelogram.
\par      *
\par      *  Parallélogramme hérite de geometricShape::Shape et calcul un parallélogramme en fonction de la taille de son côté.
\par      *  Le premier point est dessiné à la largeur et à la hauteur des positions données (width/heigth).
\par      * 
\par      */
\par     \b0\cb3\cf14\b class \b0\cb1\cf0 Parallelogram \cb3\cf25 : \cb3\cf14\b public \b0\cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 Shape \cb3\cf25 \{       
\par         \cb3\cf14\b public\b0\cb3\cf25 :
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Constructeur de la class Parallelogram.
\par              *
\par              *  Le constructeur reçoit en entrer la taille du petit coté du Parallelogram ainsi que sa position dans la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b sizeCote : Taille d'un coté du Parallelogram.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b height : Emplacement du premier point en hauteur.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b width : Emplacement du premier point en largeur.
\par              */
\par             \b0\cb1\cf0 Parallelogram\cb3\cf25 (\cb3\cf14\b double \b0\cb1\cf0 sizeCote\cb3\cf25 , \cb3\cf14\b int \b0\cb1\cf0 width\cb3\cf25 , \cb3\cf14\b int \b0\cb1\cf0 height\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Destructeur de la classe Parallelogram.
\par              *
\par              *  Destructeur de la classe Shape déclaré en virtuel.
\par              *  Le destructeur n'a pas d'implémentation car les attribut sont statics. 
\par              */
\par             \b0\cb3\cf14\b virtual \b0\cb3\cf25 ~\cb1\cf0 Parallelogram\cb3\cf25 ();
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Constructeur de copie.
\par              *
\par              *  Constructeur de copie de la classe Parallelogram.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b tc : Parallelogram à copier.
\par              */
\par             \b0\cb1\cf0 Parallelogram\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 Parallelogram \cb3\cf25 &\cb1\cf0 tc\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Opérateur de copie.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b tc : Objet de type Parallelogram à copié.
\par              */
\par             \b0\cb1\cf0 Parallelogram \cb3\cf25 & \cb3\cf14\b operator\b0\cb3\cf25 =(\cb3\cf14\b const \b0\cb1\cf0 Parallelogram \cb3\cf25 &\cb1\cf0 tc\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Méthode d'affichage pour le flux de sortie.
\par              *
\par              *  Cette méthode permet d'afficher les paramètres de l'objet Parallelogram dans un flux de sortie (par défault std::cout).
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b out : Flux de sortie, par défaut std::cout.
\par              */
\par             \b0\cb3\cf14\b void \b0\cb1\cf0 display\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb1\cf0 ostream \cb3\cf25 & \cb1\cf0 out \cb3\cf25 = \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b cout\b0\cb3\cf25 ) \cb3\cf14\b const override\b0\cb3\cf25 ;
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Surcharge de la méthode reverse spécifique aux parallelogram.
\par              *
\par              *  La méthode reverse doit être surcharger car contrairement à la classe Square et à la classe RigthTriangle, on doit réalisé le mirroir de celle-ci.
\par              *  On réalise donc la symétrie du parallèlogram dans cette méthode car un retournement par 180° n'est pas la symétrie du parralèlogramme.
\par              */
\par             \b0\cb3\cf14\b void \b0\cb3\cf16\b reverse\b0\cb3\cf25 () \cb3\cf14\b override\b0\cb3\cf25 ;
\par     \};
\par \}
\par 
\par \cb3\cf16 #endif \cb3\cf4 // PARALLELOGRAM_H
\par }