{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf6\b /*!
\par  *  \b0\cb3\cf8 \\file \cb3\cf6\b point.hpp
\par  *  \b0\cb3\cf8 \\brief \cb3\cf6\b Le fichier d'entête de point.cpp.
\par  *  \b0\cb3\cf8 \\author \cb3\cf6\b BEN HAMOUDA Amel & DURAND Aurélien
\par  */
\par 
\par \b0\cb3\cf16 #ifndef POINT_H
\par #define POINT_H
\par #include <vector>
\par #include <iostream>
\par #include <assert.h>
\par \cb3\cf14\b namespace \b0\cb1\cf0 geometricShape \cb3\cf25 \{
\par 
\par     \cb3\cf6\b /*! \b0\cb3\cf8 \\class \cb3\cf6\b Point
\par      *  \b0\cb3\cf8 \\brief \cb3\cf6\b Classe pour créer des points 2D.
\par      *
\par      *  \b0\cb3\cf8 \\tparam \cb3\cf6\b T Type associé à un bouton (int, double,...).
\par      */
\par     \b0\cb3\cf14\b template\b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 > 
\par     \cb3\cf14\b class \b0\cb1\cf0 Point \cb3\cf25 \{       
\par         \cb3\cf14\b public\b0\cb3\cf25 :
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Constructeur de Point.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b x : La coordonnée x d'un point.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b y : La coordonnée y d'un point.
\par              */
\par             \b0\cb1\cf0 Point\cb3\cf25 (\cb1\cf0 T x\cb3\cf25 , \cb1\cf0 T y\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Destructeur de Point.
\par              *
\par              *  Destructeur de la classe Point déclarée en virtuel.
\par              *  Le destructeur n'a pas d'implémentation car les attributs sont statics.
\par              */
\par             \b0\cb3\cf14\b virtual \b0\cb3\cf25 ~\cb1\cf0 Point\cb3\cf25 ();
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Constructeur avec une liste d'initialisation de point.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b list_x : Liste de coordonnée en x.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b list_y : Liste de coordonnée en y.
\par              */
\par             \b0\cb1\cf0 Point\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b initializer_list\b0\cb3\cf25 <\cb1\cf0 T\cb3\cf25 > \cb1\cf0 list_x\cb3\cf25 , \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b initializer_list\b0\cb3\cf25 <\cb1\cf0 T\cb3\cf25 > \cb1\cf0 list_y\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Geter du vecteur _px.
\par              *
\par              *   Renvoie le vecteur _px.
\par              */
\par             \b0\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb1\cf0 T\cb3\cf25 > \cb1\cf0 get_Px\cb3\cf25 () \{
\par                 \cb3\cf14\b return \b0\cb1\cf0 _px\cb3\cf25 ;
\par             \}
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \\brief \cb3\cf6\b Geter du vecteur _py.
\par              *
\par              *   Renvoie le vecteur _py.
\par              */
\par             \b0\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb1\cf0 T\cb3\cf25 > \cb1\cf0 get_Py\cb3\cf25 () \{
\par                 \cb3\cf14\b return \b0\cb1\cf0 _py\cb3\cf25 ;
\par             \}
\par             
\par         \cb3\cf14\b private\b0\cb3\cf25 :
\par             \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb1\cf0 T\cb3\cf25 > \cb1\cf0 _px\cb3\cf25 ; \cb3\cf6\b /*!< Vecteur des coordonnées x. */
\par             \b0\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb1\cf0 T\cb3\cf25 > \cb1\cf0 _py\cb3\cf25 ; \cb3\cf6\b /*!< Vecteur des coordonnées y. */
\par     \b0\cb3\cf25 \};
\par 
\par     \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par     \cb1\cf0 Point\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Point\cb3\cf25 (\cb1\cf0 T x\cb3\cf25 , \cb1\cf0 T y\cb3\cf25 ) \{
\par         \cb1\cf0 _px\cb3\cf25 .\cb3\cf16\b push_back\b0\cb3\cf25 (\cb1\cf0 x\cb3\cf25 );
\par         \cb1\cf0 _py\cb3\cf25 .\cb3\cf16\b push_back\b0\cb3\cf25 (\cb1\cf0 y\cb3\cf25 );
\par     \};
\par 
\par     \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par     \cb1\cf0 Point\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::~\cb1\cf0 Point\cb3\cf25 ()\{\};
\par 
\par     \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par     \cb1\cf0 Point\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Point\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b initializer_list\b0\cb3\cf25 <\cb1\cf0 T\cb3\cf25 > \cb1\cf0 list_x\cb3\cf25 , \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b initializer_list\b0\cb3\cf25 <\cb1\cf0 T\cb3\cf25 > \cb1\cf0 list_y\cb3\cf25 ) : \cb1\cf0 _px\cb3\cf25 (\cb1\cf0 list_x\cb3\cf25 ), \cb1\cf0 _py\cb3\cf25 (\cb1\cf0 list_y\cb3\cf25 )\{
\par         \cb1\cf0 assert\cb3\cf25 (\cb1\cf0 list_y\cb3\cf25 .\cb3\cf16\b size\b0\cb3\cf25 () == \cb1\cf0 list_x\cb3\cf25 .\cb3\cf16\b size\b0\cb3\cf25 ());
\par     \};
\par \}
\par 
\par \cb3\cf16 #endif \cb3\cf4 // POINT_H
\par }