{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf6\b /*!
\par  *  \b0\cb3\cf8 \\file \cb3\cf6\b interface.hpp
\par  *  \b0\cb3\cf8 \\brief \cb3\cf6\b Le fichier d'entête de interface.cpp.
\par  *  \b0\cb3\cf8 \\author \cb3\cf6\b BEN HAMOUDA Amel & DURAND Aurélien
\par  */
\par 
\par \b0\cb3\cf16 #ifndef INTERFACE_H
\par #define INTERFACE_H
\par     #include <vector>
\par     #include <iostream>
\par     #include <iostream> 
\par     #include <MLV/MLV_all.h>
\par     #include <memory> 
\par     #include <algorithm>
\par     #include <cmath>
\par     #include <fstream>
\par     #include <string>
\par     #include "../include/shape.hpp"
\par     
\par     \cb3\cf6\b /*! \b0\cb3\cf8 \\class \cb3\cf6\b Interface
\par      *  \b0\cb3\cf8 \\brief \cb3\cf6\b Classe representant l'interface du jeu.
\par      *
\par      *  La classe gére l'affichage du jeu.
\par      */
\par     \b0\cb3\cf14\b class \b0\cb1\cf0 Interface \cb3\cf25 \{
\par         \cb3\cf14\b public \b0\cb3\cf25 :
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Initialisation des figures du tangram.
\par              *
\par              *  Reçoit un vecteur de shared_ptr de type Shape qui sera remplie des objets du tangram (Square, Parallelogram et RigthTriangle).
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b size : La taille de référence des figures qui est la taille associé au côté du carré.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b width : La longeur de la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b height : La largeur de la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b shapeShared : Le vecteur de shared_ptr de type Shape à remplir.
\par              */
\par             \b0\cb3\cf14\b void \b0\cb1\cf0 initialiseShared\cb3\cf25 (\cb3\cf14\b const int \b0\cb3\cf16\b size\b0\cb3\cf25 ,\cb3\cf14\b const int \b0\cb1\cf0 width\cb3\cf25 ,\cb3\cf14\b const int \b0\cb1\cf0 height\cb3\cf25 , \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b shared_ptr\b0\cb3\cf25 <\cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 Shape\cb3\cf25 >> &\cb1\cf0 shapeShared\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Initialisation d'un motif initial.
\par              *
\par              *  Reçoit un vecteur de shared_ptr de type Shape qui sera remplie des objets du tangram (Square, Parallelogram et RigthTriangle).
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b size : La taille de référence des figures qui est la taille associé au côté du carré.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b width : La longeur de la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b height : La largeur de la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b motif : Le vecteur de shared_ptr de type Shape à remplir.
\par              */
\par             \b0\cb3\cf14\b void \b0\cb1\cf0 initialiseMotif\cb3\cf25 (\cb3\cf14\b const int \b0\cb3\cf16\b size\b0\cb3\cf25 , \cb3\cf14\b const int \b0\cb1\cf0 width\cb3\cf25 , \cb3\cf14\b const int \b0\cb1\cf0 height\cb3\cf25 , \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b shared_ptr\b0\cb3\cf25 <\cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 Shape\cb3\cf25 >> &\cb1\cf0 motif\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Permet la copie d'un shared_ptr.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b clone : Le vecteur de shared_ptr de type Shape à cloner.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b shapeShared : Le vecteur de shared_ptr de type Shape à remplir.
\par              */
\par             \b0\cb3\cf14\b void \b0\cb1\cf0 clone\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b shared_ptr\b0\cb3\cf25 <\cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 Shape\cb3\cf25 >> &\cb1\cf0 clone\cb3\cf25 , \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b shared_ptr\b0\cb3\cf25 <\cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 Shape\cb3\cf25 >> &\cb1\cf0 shapeShared\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Permet la deplacement sémantique d'un shared_ptr.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b clone : Le vecteur de shared_ptr de type Shape à déplacer.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b shapeShared : Le vecteur de shared_ptr de type Shape à remplir.
\par              */
\par             \b0\cb3\cf14\b void \b0\cb3\cf16\b move\b0\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b shared_ptr\b0\cb3\cf25 <\cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 Shape\cb3\cf25 >> &\cb1\cf0 clone\cb3\cf25 , \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b shared_ptr\b0\cb3\cf25 <\cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 Shape\cb3\cf25 >> &\cb1\cf0 shapeShared\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Méthode permettant d'importé des figures.
\par              *
\par              *  Permet d'ouvrir le fichier texte savefig.txt qui contient l'ensemble des figures sauvegardées obtenues grâce à la méthode saveFigure.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b n : Le numéro de la figure à lire.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b motif : Le motif à remplir en fonction de la lecture du fichier.
\par              */
\par             \b0\cb3\cf14\b bool \b0\cb1\cf0 importDraw\cb3\cf25 (\cb3\cf14\b const int \b0\cb1\cf0 n\cb3\cf25 , \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b shared_ptr\b0\cb3\cf25 <\cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 Shape\cb3\cf25 >> &\cb1\cf0 motif\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Méthode permettant de sauvegarder une figure.
\par              *  
\par              *  Demande de sauvegarder une figure dessiné par le joueur dans le ficher savefig.txt cette méthode fait appel .
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b width : La longeur de la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b height : La largeur de la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b fig : Le vecteur de shared_ptr de type Shape remplie.
\par              */
\par             \b0\cb3\cf14\b void \b0\cb1\cf0 saveFigure\cb3\cf25 (\cb3\cf14\b const int \b0\cb1\cf0 width\cb3\cf25 ,\cb3\cf14\b const int \b0\cb1\cf0 height\cb3\cf25 ,\cb3\cf14\b const \b0\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b shared_ptr\b0\cb3\cf25 <\cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 Shape\cb3\cf25 >> &\cb1\cf0 fig\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Méthode permettant d'afficher une image (message) quand le joueur gagne.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b width : La longeur de la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b height : La largeur de la fenêtre.
\par              */
\par             \b0\cb3\cf14\b void \b0\cb1\cf0 winner\cb3\cf25 (\cb3\cf14\b const int \b0\cb1\cf0 width\cb3\cf25 , \cb3\cf14\b const int \b0\cb1\cf0 height\cb3\cf25 );
\par 
\par             \cb3\cf6\b /*!
\par              *  \b0\cb3\cf8 \\brief \cb3\cf6\b Méthode permettant de dessiner l'interface graphique du jeu.
\par              *
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b width : La longeur de la fenêtre.
\par              *  \b0\cb3\cf8 \\param \cb3\cf6\b height : La largeur de la fenêtre.
\par              */
\par             \b0\cb3\cf14\b void \b0\cb1\cf0 drawJeu\cb3\cf25 (\cb3\cf14\b const int \b0\cb1\cf0 width\cb3\cf25 ,\cb3\cf14\b const int \b0\cb1\cf0 height\cb3\cf25 );
\par     \};
\par 
\par \cb3\cf16 #endif \cb3\cf4 // INTERFACE_H
\par }