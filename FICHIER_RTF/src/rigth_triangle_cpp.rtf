{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf16 #include "../include/rigth_triangle.hpp"
\par #include "../include/point.hpp"
\par #include <cmath>
\par #include <MLV/MLV_all.h>
\par 
\par \cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 RigthTriangle\cb3\cf25 ::~\cb1\cf0 RigthTriangle\cb3\cf25 () \{\}
\par 
\par \cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 RigthTriangle \cb3\cf25 & \cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 RigthTriangle\cb3\cf25 ::\cb3\cf14\b operator\b0\cb3\cf25 =(\cb3\cf14\b const \b0\cb1\cf0 RigthTriangle \cb3\cf25 & \cb1\cf0 tc\cb3\cf25 ) \{
\par     \cb3\cf14\b if \b0\cb3\cf25 (\cb3\cf14\b this \b0\cb3\cf25 == &\cb1\cf0 tc\cb3\cf25 ) \{
\par         \cb3\cf14\b return \b0\cb3\cf25 *\cb3\cf14\b this\b0\cb3\cf25 ;
\par     \}
\par     \cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 RigthTriangle \cb3\cf16\b copy\b0\cb3\cf25 (\cb1\cf0 tc\cb3\cf25 );
\par     *\cb3\cf14\b this \b0\cb3\cf25 = \cb3\cf16\b copy\b0\cb3\cf25 ;
\par     \cb3\cf14\b return \b0\cb3\cf25 *\cb3\cf14\b this\b0\cb3\cf25 ;
\par \}
\par 
\par \cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 RigthTriangle\cb3\cf25 ::\cb1\cf0 RigthTriangle\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 RigthTriangle \cb3\cf25 & \cb1\cf0 tc\cb3\cf25 ) : \cb1\cf0 Shape\cb3\cf25 (\cb1\cf0 tc\cb3\cf25 ), \cb1\cf0 hauteur\cb3\cf25 (\cb1\cf0 tc\cb3\cf25 .\cb1\cf0 hauteur\cb3\cf25 ) \{\}
\par 
\par \cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 RigthTriangle\cb3\cf25 ::\cb1\cf0 RigthTriangle\cb3\cf25 (\cb3\cf14\b double \b0\cb1\cf0 sizeCote\cb3\cf25 , \cb3\cf14\b int \b0\cb1\cf0 width\cb3\cf25 , \cb3\cf14\b int \b0\cb1\cf0 height\cb3\cf25 ) : \cb1\cf0 Shape\cb3\cf25 (\cb1\cf0 sizeCote\cb3\cf25 , \cb1\cf0 width\cb3\cf25 , \cb1\cf0 height\cb3\cf25 ), \cb1\cf0 hauteur\cb3\cf25 (\cb3\cf12 0\cb3\cf25 ) \{
\par     \cb3\cf14\b double \b0\cb1\cf0 _size_cote \cb3\cf25 = \cb1\cf0 sizeCote\cb3\cf25 ;
\par     \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb3\cf14\b double\b0\cb3\cf25 > \cb1\cf0 _px\cb3\cf25 ;
\par     \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb3\cf14\b double\b0\cb3\cf25 > \cb1\cf0 _py\cb3\cf25 ;
\par     \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b vector\b0\cb3\cf25 <\cb3\cf14\b double\b0\cb3\cf25 > \cb1\cf0 center\cb3\cf25 ;
\par     \cb3\cf14\b double \b0\cb1\cf0 dw \cb3\cf25 = (\cb3\cf14\b double\b0\cb3\cf25 )\cb1\cf0 width\cb3\cf25 ;
\par     \cb3\cf14\b double \b0\cb1\cf0 dh \cb3\cf25 = (\cb3\cf14\b double\b0\cb3\cf25 )\cb1\cf0 height\cb3\cf25 ;
\par     \cb1\cf0 Point\cb3\cf25 <\cb3\cf14\b double\b0\cb3\cf25 > \cb1\cf0 point_triangle\cb3\cf25 (\{\cb1\cf0 dw\cb3\cf25 , \cb1\cf0 dw \cb3\cf25 + \cb1\cf0 _size_cote\cb3\cf25 , \cb1\cf0 dw\cb3\cf25 \}, \{\cb1\cf0 dh\cb3\cf25 , \cb1\cf0 dh\cb3\cf25 , \cb1\cf0 dh \cb3\cf25 + \cb1\cf0 _size_cote\cb3\cf25 \});
\par     \cb1\cf0 _px \cb3\cf25 = \cb1\cf0 point_triangle\cb3\cf25 .\cb1\cf0 get_Px\cb3\cf25 ();
\par     \cb1\cf0 _py \cb3\cf25 = \cb1\cf0 point_triangle\cb3\cf25 .\cb1\cf0 get_Py\cb3\cf25 ();
\par     \cb1\cf0 center\cb3\cf25 .\cb3\cf16\b push_back\b0\cb3\cf25 ((\cb3\cf14\b double\b0\cb3\cf25 )\cb1\cf0 width \cb3\cf25 + (\cb3\cf14\b double\b0\cb3\cf25 )\cb1\cf0 _size_cote \cb3\cf25 / \cb3\cf12 3\cb3\cf25 );
\par     \cb1\cf0 center\cb3\cf25 .\cb3\cf16\b push_back\b0\cb3\cf25 ((\cb3\cf14\b double\b0\cb3\cf25 )\cb1\cf0 height \cb3\cf25 + (\cb3\cf14\b double\b0\cb3\cf25 )\cb1\cf0 _size_cote \cb3\cf25 / \cb3\cf12 3\cb3\cf25 );
\par     \cb1\cf0 hauteur \cb3\cf25 = \cb1\cf0 sqrt\cb3\cf25 (\cb1\cf0 pow\cb3\cf25 (\cb1\cf0 _size_cote\cb3\cf25 , \cb3\cf12 2\cb3\cf25 ) * \cb3\cf12 2\cb3\cf25 ) / \cb3\cf12 2\cb3\cf25 ;
\par     \cb1\cf0 setShape\cb3\cf25 (\cb1\cf0 _px\cb3\cf25 , \cb1\cf0 _py\cb3\cf25 , \cb1\cf0 center\cb3\cf25 , \cb1\cf0 _size_cote\cb3\cf25 );
\par \}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 RigthTriangle\cb3\cf25 ::\cb1\cf0 display\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb1\cf0 ostream \cb3\cf25 & \cb1\cf0 os\cb3\cf25 ) \cb3\cf14\b const \b0\cb3\cf25 \{
\par     \cb1\cf0 os \cb3\cf25 << \cb3\cf20 "[RigthTriangle]"\cb3\cf25 ;
\par     \cb1\cf0 geometricShape\cb3\cf25 ::\cb1\cf0 Shape\cb3\cf25 ::\cb1\cf0 display\cb3\cf25 ();
\par     \cb1\cf0 os \cb3\cf25 << \cb3\cf20 "Hauteur: " \cb3\cf25 << \cb1\cf0 hauteur \cb3\cf25 << \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \}
\par }