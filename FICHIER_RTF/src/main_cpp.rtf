{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf16 #include "../include/interface.hpp"
\par #include "../include/menu.hpp"
\par #include "../include/button.hpp"
\par #include <memory> 
\par #include <vector>
\par #include <algorithm>
\par #include <cmath>
\par #include <fstream>
\par #include <iostream>
\par #include <string>
\par 
\par \cb3\cf4 //valgrind --leak-check=full ./Tangram
\par 
\par \cb3\cf14\b int \b0\cb1\cf0 main\cb3\cf25 ( \cb3\cf14\b int \b0\cb1\cf0 argc\cb3\cf25 , \cb3\cf14\b char \b0\cb3\cf25 *\cb1\cf0 argv\cb3\cf25 [] )\{
\par     \cb3\cf14\b constexpr int \b0\cb1\cf0 width \cb3\cf25 = \cb3\cf12 1350\cb3\cf25 , \cb1\cf0 height \cb3\cf25 = \cb3\cf12 700\cb3\cf25 ;
\par     \cb1\cf0 Menu menu\cb3\cf25 (\cb1\cf0 width\cb3\cf25 , \cb1\cf0 height\cb3\cf25 );
\par     \cb1\cf0 Interface interface\cb3\cf25 ;
\par     \cb3\cf14\b int \b0\cb1\cf0 x\cb3\cf25 , \cb1\cf0 y \cb3\cf25 ; \cb3\cf4 //Point
\par     // Créé et affiche la fenêtre
\par     \cb1\cf0 MLV_create_window\cb3\cf25 ( \cb3\cf20 "Tangram"\cb3\cf25 , \cb3\cf20 ""\cb3\cf25 , \cb1\cf0 width\cb3\cf25 , \cb1\cf0 height\cb3\cf25 );
\par 
\par     \cb3\cf4 /* Displays buttons. */
\par     \cb1\cf0 menu\cb3\cf25 .\cb1\cf0 drawMenu\cb3\cf25 ();
\par     \cb1\cf0 MLV_actualise_window\cb3\cf25 ();
\par     \cb1\cf0 MLV_wait_mouse\cb3\cf25 (&\cb1\cf0 x\cb3\cf25 , &\cb1\cf0 y\cb3\cf25 );
\par     \cb3\cf14\b bool \b0\cb1\cf0 action \cb3\cf25 = \cb3\cf14\b true\b0\cb3\cf25 ;
\par     \cb3\cf14\b while \b0\cb3\cf25 (\cb1\cf0 action\cb3\cf25 ) \{
\par         \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 menu\cb3\cf25 .\cb1\cf0 inMenu\cb3\cf25 (\cb1\cf0 x\cb3\cf25 , \cb1\cf0 y\cb3\cf25 ) == \cb3\cf12 0\cb3\cf25 ) \{ \cb3\cf4 // Jouer
\par             // Afficher board
\par             \cb1\cf0 interface\cb3\cf25 .\cb1\cf0 drawJeu\cb3\cf25 (\cb1\cf0 width\cb3\cf25 , \cb1\cf0 height\cb3\cf25 );
\par             \cb1\cf0 MLV_actualise_window\cb3\cf25 ();
\par             \cb1\cf0 action \cb3\cf25 = \cb3\cf14\b false\b0\cb3\cf25 ;
\par         \}
\par         \cb3\cf14\b else if \b0\cb3\cf25 (\cb1\cf0 menu\cb3\cf25 .\cb1\cf0 inMenu\cb3\cf25 (\cb1\cf0 x\cb3\cf25 , \cb1\cf0 y\cb3\cf25 ) == \cb3\cf12 1\cb3\cf25 ) \{ \cb3\cf4 //Quitter
\par             \cb1\cf0 action \cb3\cf25 = \cb3\cf14\b false\b0\cb3\cf25 ;
\par             \cb1\cf0 MLV_free_window\cb3\cf25 ();
\par             \cb1\cf0 exit\cb3\cf25 (\cb1\cf0 EXIT_SUCCESS\cb3\cf25 ); 
\par         \}
\par         \cb3\cf14\b else \b0\cb3\cf25 \{
\par             \cb1\cf0 MLV_wait_mouse\cb3\cf25 (&\cb1\cf0 x\cb3\cf25 , &\cb1\cf0 y\cb3\cf25 );
\par         \}
\par     \}
\par     \cb3\cf14\b return \b0\cb3\cf12 0\cb3\cf25 ;
\par \}
\par 
\par }