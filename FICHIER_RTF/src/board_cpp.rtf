{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf16 #include "../include/board.hpp"
\par #include "../include/button.hpp"
\par 
\par \cb1\cf0 Board\cb3\cf25 ::\cb1\cf0 Board\cb3\cf25 (\cb3\cf14\b const int \b0\cb1\cf0 width\cb3\cf25 , \cb3\cf14\b const int \b0\cb1\cf0 height\cb3\cf25 ) : \cb1\cf0 width\cb3\cf25 (\cb1\cf0 width\cb3\cf25 ), \cb1\cf0 height\cb3\cf25 (\cb1\cf0 height\cb3\cf25 ), \cb1\cf0 buttons\cb3\cf25 () \{\}
\par 
\par \cb1\cf0 Board\cb3\cf25 ::~\cb1\cf0 Board\cb3\cf25 () \{\}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Board\cb3\cf25 ::\cb1\cf0 drawBoard\cb3\cf25 () \{
\par     \cb1\cf0 MLV_draw_filled_rectangle\cb3\cf25 (\cb3\cf12 40\cb3\cf25 , \cb3\cf12 30\cb3\cf25 , \cb1\cf0 width \cb3\cf25 - (\cb1\cf0 round\cb3\cf25 (\cb1\cf0 width \cb3\cf25 / \cb3\cf12 6\cb3\cf25 ) * \cb3\cf12 2\cb3\cf25 ) + \cb3\cf12 150\cb3\cf25 , \cb1\cf0 height \cb3\cf25 - (\cb1\cf0 round\cb3\cf25 (\cb1\cf0 height \cb3\cf25 / \cb3\cf12 35\cb3\cf25 ) * \cb3\cf12 2\cb3\cf25 ), \cb1\cf0 MLV_COLOR_GRAY\cb3\cf25 );
\par     \cb1\cf0 MLV_actualise_window\cb3\cf25 ();
\par \}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Board\cb3\cf25 ::\cb1\cf0 createButtonForBoard\cb3\cf25 (\cb3\cf14\b const unsigned int \b0\cb1\cf0 numFig\cb3\cf25 ) \{
\par     \cb3\cf14\b int \b0\cb1\cf0 y \cb3\cf25 = \cb1\cf0 height \cb3\cf25 / \cb3\cf12 2\cb3\cf25 ;
\par     \cb3\cf14\b int \b0\cb1\cf0 widthButton \cb3\cf25 = \cb1\cf0 round\cb3\cf25 (\cb1\cf0 width \cb3\cf25 / \cb3\cf12 6\cb3\cf25 ) - \cb3\cf12 50\cb3\cf25 ;
\par     \cb3\cf14\b int \b0\cb1\cf0 heightButton \cb3\cf25 = \cb1\cf0 round\cb3\cf25 (\cb1\cf0 height \cb3\cf25 / \cb3\cf12 35\cb3\cf25 );
\par     \cb3\cf14\b int \b0\cb1\cf0 interligne \cb3\cf25 = \cb3\cf12 15\cb3\cf25 ;
\par     \cb3\cf14\b int \b0\cb1\cf0 x \cb3\cf25 = \cb1\cf0 width \cb3\cf25 - \cb3\cf12 200\cb3\cf25 ;
\par     \cb3\cf14\b int \b0\cb3\cf16\b size \b0\cb3\cf25 = \cb3\cf12 25\cb3\cf25 ;
\par     \cb3\cf4 // x, y La coordonnée en X, Y de la position du coin Nord-Ouest de la boîte.
\par     \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b clear\b0\cb3\cf25 ();
\par     \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b insert\b0\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb1\cf0 make_pair\cb3\cf25 (\cb3\cf12 1\cb3\cf25 ,\cb1\cf0 Button\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 >(\cb1\cf0 x\cb3\cf25 , \cb1\cf0 y\cb3\cf25 , \cb3\cf16\b size\b0\cb3\cf25 , \cb1\cf0 heightButton\cb3\cf25 , \cb3\cf20 "<-"\cb3\cf25 )));
\par     \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b insert\b0\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb1\cf0 make_pair\cb3\cf25 (\cb3\cf12 2\cb3\cf25 ,\cb1\cf0 Button\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 >(\cb1\cf0 x \cb3\cf25 + \cb1\cf0 heightButton \cb3\cf25 + \cb1\cf0 interligne\cb3\cf25 , \cb1\cf0 y\cb3\cf25 , \cb3\cf16\b size\b0\cb3\cf25 , \cb1\cf0 heightButton\cb3\cf25 , (\cb3\cf16\b std\b0\cb3\cf25 ::\cb1\cf0 to_string\cb3\cf25 (\cb1\cf0 numFig\cb3\cf25 )).\cb1\cf0 c_str\cb3\cf25 ())));
\par     \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b insert\b0\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb1\cf0 make_pair\cb3\cf25 (\cb3\cf12 3\cb3\cf25 ,\cb1\cf0 Button\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 >(\cb1\cf0 x \cb3\cf25 + (\cb1\cf0 interligne \cb3\cf25 + \cb1\cf0 heightButton\cb3\cf25 ) * \cb3\cf12 2\cb3\cf25 , \cb1\cf0 y\cb3\cf25 , \cb3\cf16\b size\b0\cb3\cf25 , \cb1\cf0 heightButton\cb3\cf25 , \cb3\cf20 "->"\cb3\cf25 )));
\par     \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b insert\b0\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb1\cf0 make_pair\cb3\cf25 (\cb3\cf12 4\cb3\cf25 ,\cb1\cf0 Button\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 >(\cb1\cf0 x\cb3\cf25 , \cb1\cf0 y \cb3\cf25 + \cb1\cf0 heightButton \cb3\cf25 + \cb1\cf0 interligne\cb3\cf25 , \cb1\cf0 widthButton\cb3\cf25 , \cb1\cf0 heightButton\cb3\cf25 , \cb3\cf20 "Solution"\cb3\cf25 )));
\par     \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b insert\b0\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb1\cf0 make_pair\cb3\cf25 (\cb3\cf12 5\cb3\cf25 ,\cb1\cf0 Button\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 >(\cb1\cf0 x\cb3\cf25 , \cb1\cf0 y \cb3\cf25 + (\cb1\cf0 heightButton \cb3\cf25 * \cb3\cf12 2\cb3\cf25 ) + (\cb1\cf0 interligne \cb3\cf25 * \cb3\cf12 2\cb3\cf25 ), \cb1\cf0 widthButton\cb3\cf25 , \cb1\cf0 heightButton\cb3\cf25 , \cb3\cf20 "Sauvegarder"\cb3\cf25 )));
\par     \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b insert\b0\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb1\cf0 make_pair\cb3\cf25 (\cb3\cf12 6\cb3\cf25 ,\cb1\cf0 Button\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 >(\cb1\cf0 x\cb3\cf25 , \cb1\cf0 y \cb3\cf25 + (\cb1\cf0 heightButton \cb3\cf25 * \cb3\cf12 3\cb3\cf25 ) + (\cb1\cf0 interligne \cb3\cf25 * \cb3\cf12 3\cb3\cf25 ), \cb1\cf0 widthButton\cb3\cf25 , \cb1\cf0 heightButton\cb3\cf25 , \cb3\cf20 "Quitter"\cb3\cf25 )));
\par     \cb3\cf14\b for \b0\cb3\cf25 (\cb3\cf14\b auto \b0\cb1\cf0 button \cb3\cf25 : \cb1\cf0 buttons\cb3\cf25 ) \{
\par         \cb1\cf0 button\cb3\cf25 .\cb1\cf0 second\cb3\cf25 .\cb1\cf0 drawButton\cb3\cf25 (\cb1\cf0 interligne\cb3\cf25 , \cb1\cf0 MLV_COLOR_GREY\cb3\cf25 , \cb1\cf0 MLV_COLOR_BLACK\cb3\cf25 , \cb1\cf0 MLV_COLOR_WHITE\cb3\cf25 );
\par     \}    
\par \}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Board\cb3\cf25 ::\cb1\cf0 drawButtonForBoard\cb3\cf25 (\cb3\cf14\b const unsigned int \b0\cb1\cf0 numFig\cb3\cf25 ) \{
\par     \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 numFig \cb3\cf25 <= \cb3\cf12 0\cb3\cf25 ) \{
\par         \cb3\cf14\b return\b0\cb3\cf25 ;
\par     \}
\par     \cb3\cf14\b int \b0\cb1\cf0 y \cb3\cf25 = \cb1\cf0 height \cb3\cf25 / \cb3\cf12 2\cb3\cf25 ;
\par     \cb3\cf14\b int \b0\cb1\cf0 heightButton \cb3\cf25 = \cb1\cf0 round\cb3\cf25 (\cb1\cf0 height \cb3\cf25 / \cb3\cf12 35\cb3\cf25 );
\par     \cb3\cf14\b int \b0\cb1\cf0 interligne \cb3\cf25 = \cb3\cf12 15\cb3\cf25 ;
\par     \cb3\cf14\b int \b0\cb1\cf0 x \cb3\cf25 = \cb1\cf0 width \cb3\cf25 - \cb3\cf12 200\cb3\cf25 ;
\par     \cb3\cf14\b int \b0\cb3\cf16\b size \b0\cb3\cf25 = \cb3\cf12 25\cb3\cf25 ;
\par     \cb3\cf4 // x, y La coordonnée en X, Y de la position du coin Nord-Ouest de la boîte.
\par     \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b map\b0\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 ,\cb1\cf0 Button\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 >>::\cb3\cf16\b iterator \b0\cb1\cf0 it \cb3\cf25 = \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b find\b0\cb3\cf25 (\cb3\cf12 2\cb3\cf25 );
\par     \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b erase\b0\cb3\cf25 (\cb1\cf0 it\cb3\cf25 );
\par     \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b insert\b0\cb3\cf25 (\cb3\cf16\b std\b0\cb3\cf25 ::\cb1\cf0 make_pair\cb3\cf25 (\cb3\cf12 2\cb3\cf25 , \cb1\cf0 Button\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 >(\cb1\cf0 x \cb3\cf25 + \cb1\cf0 heightButton \cb3\cf25 + \cb1\cf0 interligne\cb3\cf25 , \cb1\cf0 y\cb3\cf25 , \cb3\cf16\b size\b0\cb3\cf25 , \cb1\cf0 heightButton\cb3\cf25 , (\cb3\cf16\b std\b0\cb3\cf25 ::\cb1\cf0 to_string\cb3\cf25 (\cb1\cf0 numFig\cb3\cf25 )).\cb1\cf0 c_str\cb3\cf25 ())));    
\par     \cb3\cf14\b for \b0\cb3\cf25 (\cb3\cf14\b auto \b0\cb1\cf0 button \cb3\cf25 : \cb1\cf0 buttons\cb3\cf25 ) \{
\par         \cb1\cf0 button\cb3\cf25 .\cb1\cf0 second\cb3\cf25 .\cb1\cf0 drawButton\cb3\cf25 (\cb1\cf0 interligne\cb3\cf25 , \cb1\cf0 MLV_COLOR_GREY\cb3\cf25 , \cb1\cf0 MLV_COLOR_BLACK\cb3\cf25 , \cb1\cf0 MLV_COLOR_WHITE\cb3\cf25 );
\par     \}
\par \}
\par 
\par \cb3\cf14\b int \b0\cb1\cf0 Board\cb3\cf25 ::\cb1\cf0 inBoard\cb3\cf25 (\cb3\cf14\b const int \b0\cb1\cf0 pX\cb3\cf25 , \cb3\cf14\b const int \b0\cb1\cf0 pY\cb3\cf25 ) \{
\par     \cb3\cf14\b unsigned int \b0\cb3\cf16\b count \b0\cb3\cf25 = \cb3\cf12 0\cb3\cf25 ;
\par     \cb3\cf14\b for \b0\cb3\cf25 (\cb3\cf14\b auto \b0\cb1\cf0 button \cb3\cf25 : \cb1\cf0 buttons\cb3\cf25 ) \{
\par         \cb3\cf14\b bool \b0\cb1\cf0 ibout \cb3\cf25 = \cb1\cf0 button\cb3\cf25 .\cb1\cf0 second\cb3\cf25 .\cb1\cf0 inButton\cb3\cf25 (\cb1\cf0 pX\cb3\cf25 , \cb1\cf0 pY\cb3\cf25 );
\par         \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 ibout \cb3\cf25 == \cb3\cf14\b true\b0\cb3\cf25 ) \{
\par             \cb3\cf14\b break\b0\cb3\cf25 ;
\par         \}
\par         \cb3\cf16\b count\b0\cb3\cf25 ++;
\par     \}
\par     \cb3\cf14\b if\b0\cb3\cf25 (\cb3\cf16\b count \b0\cb3\cf25 == \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b size\b0\cb3\cf25 ()) \{
\par         \cb3\cf16\b count \b0\cb3\cf25 = \cb3\cf12 0\cb3\cf25 ;
\par     \}
\par     \cb3\cf14\b else \b0\cb3\cf25 \{
\par         \cb3\cf16\b count\b0\cb3\cf25 ++;
\par     \}
\par     \cb3\cf14\b return \b0\cb3\cf16\b count\b0\cb3\cf25 ;
\par \}
\par }