{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf16 #include "../include/menu.hpp"
\par #include "../include/button.hpp"
\par 
\par \cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 Menu\cb3\cf25 (\cb3\cf14\b const int \b0\cb1\cf0 width\cb3\cf25 , \cb3\cf14\b const int \b0\cb1\cf0 height\cb3\cf25 ) : \cb1\cf0 width\cb3\cf25 (\cb1\cf0 width\cb3\cf25 ), \cb1\cf0 height\cb3\cf25 (\cb1\cf0 height\cb3\cf25 ), \cb1\cf0 buttons\cb3\cf25 (\cb3\cf12 0\cb3\cf25 ) \{\}
\par 
\par \cb1\cf0 Menu\cb3\cf25 ::~\cb1\cf0 Menu\cb3\cf25 () \{\}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 drawMenu\cb3\cf25 () \{
\par     \cb3\cf14\b int \b0\cb1\cf0 widthButton \cb3\cf25 = \cb1\cf0 round\cb3\cf25 (\cb1\cf0 width \cb3\cf25 / \cb3\cf12 6\cb3\cf25 );
\par     \cb3\cf14\b int \b0\cb1\cf0 heightButton \cb3\cf25 = \cb1\cf0 round\cb3\cf25 (\cb1\cf0 height \cb3\cf25 / \cb3\cf12 35\cb3\cf25 );
\par     \cb3\cf14\b int \b0\cb1\cf0 interligne \cb3\cf25 = \cb3\cf12 15\cb3\cf25 ;
\par     
\par     \cb1\cf0 MLV_Image \cb3\cf25 *\cb1\cf0 image \cb3\cf25 = \cb1\cf0 MLV_load_image\cb3\cf25 (\cb3\cf20 "images/titre.jpg"\cb3\cf25 );
\par     \cb3\cf14\b int \b0\cb1\cf0 image_width\cb3\cf25 , \cb1\cf0 image_height\cb3\cf25 ;
\par     \cb1\cf0 MLV_get_image_size\cb3\cf25 (\cb1\cf0 image\cb3\cf25 , &\cb1\cf0 image_width\cb3\cf25 , &\cb1\cf0 image_height\cb3\cf25 );
\par     \cb1\cf0 MLV_resize_image_with_proportions\cb3\cf25 (\cb1\cf0 image\cb3\cf25 , \cb1\cf0 image_width \cb3\cf25 * \cb3\cf12 2\cb3\cf25 , \cb1\cf0 image_height \cb3\cf25 * \cb3\cf12 2\cb3\cf25 );
\par     \cb1\cf0 MLV_get_image_size\cb3\cf25 (\cb1\cf0 image\cb3\cf25 , &\cb1\cf0 image_width\cb3\cf25 , &\cb1\cf0 image_height\cb3\cf25 );
\par     \cb3\cf14\b int \b0\cb1\cf0 x_image \cb3\cf25 = (\cb1\cf0 width \cb3\cf25 / \cb3\cf12 2\cb3\cf25 ) - (\cb1\cf0 image_width \cb3\cf25 / \cb3\cf12 2\cb3\cf25 );
\par     \cb3\cf14\b int \b0\cb1\cf0 y_image \cb3\cf25 = (\cb1\cf0 height \cb3\cf25 / \cb3\cf12 2\cb3\cf25 ) - (\cb1\cf0 image_height \cb3\cf25 / \cb3\cf12 2\cb3\cf25 );
\par     \cb1\cf0 MLV_draw_image\cb3\cf25 (\cb1\cf0 image\cb3\cf25 , \cb1\cf0 x_image\cb3\cf25 , \cb1\cf0 y_image \cb3\cf25 - \cb3\cf12 100\cb3\cf25 );
\par 
\par     \cb3\cf4 // x, y La coordonnée en X, Y de la position du coin Nord-Ouest de la boîte.
\par     \cb3\cf14\b int \b0\cb1\cf0 x \cb3\cf25 = (\cb1\cf0 width \cb3\cf25 / \cb3\cf12 2\cb3\cf25 ) - (\cb1\cf0 widthButton \cb3\cf25 / \cb3\cf12 2\cb3\cf25 );
\par     \cb3\cf14\b int \b0\cb1\cf0 y \cb3\cf25 = (\cb1\cf0 height \cb3\cf25 / \cb3\cf12 2\cb3\cf25 ) - (\cb1\cf0 heightButton \cb3\cf25 / \cb3\cf12 2\cb3\cf25 );
\par     \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b push_back\b0\cb3\cf25 (\cb1\cf0 Button\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 >(\cb1\cf0 x\cb3\cf25 , \cb1\cf0 y\cb3\cf25 , \cb1\cf0 widthButton\cb3\cf25 , \cb1\cf0 heightButton\cb3\cf25 , \cb3\cf20 "Jouer"\cb3\cf25 ));
\par     \cb1\cf0 buttons\cb3\cf25 .\cb3\cf16\b push_back\b0\cb3\cf25 (\cb1\cf0 Button\cb3\cf25 <\cb3\cf14\b int\b0\cb3\cf25 >(\cb1\cf0 x\cb3\cf25 , \cb1\cf0 y \cb3\cf25 + \cb1\cf0 heightButton \cb3\cf25 + \cb1\cf0 interligne\cb3\cf25 , \cb1\cf0 widthButton\cb3\cf25 , \cb1\cf0 heightButton\cb3\cf25 , \cb3\cf20 "Quitter"\cb3\cf25 ));
\par     \cb3\cf14\b for \b0\cb3\cf25 (\cb3\cf14\b auto \b0\cb1\cf0 button \cb3\cf25 : \cb1\cf0 buttons\cb3\cf25 )\{
\par         \cb1\cf0 button\cb3\cf25 .\cb1\cf0 drawButton\cb3\cf25 (\cb1\cf0 interligne\cb3\cf25 , \cb1\cf0 MLV_COLOR_GREY\cb3\cf25 , \cb1\cf0 MLV_COLOR_BLACK\cb3\cf25 , \cb1\cf0 MLV_COLOR_WHITE\cb3\cf25 );
\par     \}
\par     \cb1\cf0 MLV_free_image\cb3\cf25 (\cb1\cf0 image\cb3\cf25 );
\par \}
\par 
\par \cb3\cf14\b int \b0\cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 inMenu\cb3\cf25 (\cb3\cf14\b const int \b0\cb1\cf0 pX\cb3\cf25 , \cb3\cf14\b const int \b0\cb1\cf0 pY\cb3\cf25 ) \{
\par     \cb3\cf14\b int \b0\cb3\cf16\b count \b0\cb3\cf25 = \cb3\cf12 0\cb3\cf25 ;
\par     \cb3\cf14\b for \b0\cb3\cf25 (\cb3\cf14\b auto \b0\cb1\cf0 button \cb3\cf25 : \cb1\cf0 buttons\cb3\cf25 ) \{
\par         \cb3\cf14\b bool \b0\cb1\cf0 ibout \cb3\cf25 = \cb1\cf0 button\cb3\cf25 .\cb1\cf0 inButton\cb3\cf25 (\cb1\cf0 pX\cb3\cf25 , \cb1\cf0 pY\cb3\cf25 );
\par         \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 ibout \cb3\cf25 == \cb3\cf14\b true\b0\cb3\cf25 ) \{
\par             \cb3\cf14\b break\b0\cb3\cf25 ;
\par         \}
\par         \cb3\cf16\b count\b0\cb3\cf25 ++;
\par     \}
\par     \cb3\cf14\b return \b0\cb3\cf16\b count\b0\cb3\cf25 ;
\par \}
\par }